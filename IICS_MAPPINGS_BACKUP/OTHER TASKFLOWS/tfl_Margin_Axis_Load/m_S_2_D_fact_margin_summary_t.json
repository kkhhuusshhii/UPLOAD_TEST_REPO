[
    {
        "type": "customQuery",
        "path": "content.transformations[0].dataAdapter.object.customQuery",
        "value": "SELECT\nROW_NUMBER() OVER (ORDER BY\nf.src_sys_cd\n,\"year\"\n,\"month\"\n,f.dim_broker_key\n,f.broker_rut_num\n,broker.broker_name\n,f.agreement\n,f.dim_prd_pln_hrchy_key\n,f.prd_cd\n,f.prd_desc\n,f.dim_lob_key\n,f.lob_cd\n,f.lob_desc\n,f.dim_branch_office_key\n,f.branch_office_cd\n,f.branch_office_name\n,region.region_name\n,f.rlshp_key\n,f.executive_rut\n,f.executive_name\n,f.dim_policyholder_key\n,f.dim_insured_key\n,currency_cd)  FACT_MARGIN_SUMMARY_KEY,\nf.src_sys_cd\n,\"year\"\n,\"month\"\n,count(distinct policy_num) as policy_num_count\n,count(distinct policy_item_id) as policy_item_id_count\n,count(distinct policy_item_num) as policy_item_num_count \n,f.dim_broker_key\n,f.broker_rut_num\n,broker.broker_name\n,f.agreement\n,f.dim_prd_pln_hrchy_key\n,f.prd_cd\n,f.prd_desc\n,f.dim_lob_key\n,f.lob_cd\n,f.lob_desc\n,f.dim_branch_office_key\n,f.branch_office_cd\n,f.branch_office_name\n,region.region_name\n,f.rlshp_key\n,f.executive_rut\n,f.executive_name\n,f.dim_policyholder_key\n,f.dim_insured_key\n,case when src_sys_cd = 'axis' then sum(b.conv*gwp_amt) else sum(gwp_amt) end as gwp_amt \n,case when src_sys_cd = 'axis' then sum(b.conv*cwp_amt) else sum(cwp_amt) end as cwp_amt\n,case when src_sys_cd = 'axis' then sum(b.conv*actual_provision_adjusted_retained_premium_amt) else sum(actual_provision_adjusted_retained_premium_amt) end as actual_provision_adjusted_retained_premium_amt\n,case when src_sys_cd = 'axis' then sum(c.prev_conv*previous_provision_adjusted_retained_premium_amt) else sum(previous_provision_adjusted_retained_premium_amt) end as previous_provision_adjusted_retained_premium_amt\n,case when src_sys_cd = 'axis' then sum(b.conv*provision_adjusted_retained_premium_amt) else sum(provision_adjusted_retained_premium_amt) end as provision_adjusted_retained_premium_amt\n,case when src_sys_cd = 'axis' then sum(b.conv*retained_claims_payments_amt) else sum(retained_claims_payments_amt) end as retained_claims_payments_amt\n,case when src_sys_cd = 'axis' then sum(b.conv*retained_recovered_claims_amt) else sum(retained_recovered_claims_amt) end as retained_recovered_claims_amt\n,case when src_sys_cd = 'axis' then sum(b.conv*actual_retained_adjusted_reserve_claims_amt) else sum(actual_retained_adjusted_reserve_claims_amt) end as actual_retained_adjusted_reserve_claims_amt\n,case when src_sys_cd = 'axis' then sum(c.prev_conv*previous_retained_adjusted_reserve_claims_amt) else sum(previous_retained_adjusted_reserve_claims_amt) end as previous_retained_adjusted_reserve_claims_amt\n,case when src_sys_cd = 'axis' then sum(b.conv*retained_adjusted_reserve_claims_amt) else sum(retained_adjusted_reserve_claims_amt) end as retained_adjusted_reserve_claims_amt\n,case when src_sys_cd = 'axis' then sum(b.conv*broker_commission_amt) else sum(broker_commission_amt) end as broker_commission_amt\n,case when src_sys_cd = 'axis' then sum(b.conv*reinsurance_discount_amt) else sum(reinsurance_discount_amt) end as reinsurance_discount_amt\n,case when src_sys_cd = 'axis' then sum(b.conv*retail_comission) else sum(retail_comission) end as retail_comission\n,'CLF' as currency_cd\nFROM\n( Select * from cdp_dwh.fact_margin_t where src_sys_cd = 'axis') f \nleft join (select dim_branch_office_key,dim_region_key,branch_office_cd from cdp_dwh.dim_branch_office_t) branch_office\non f.dim_branch_office_key = branch_office.dim_branch_office_key\nand f.branch_office_cd = branch_office.branch_office_cd\nleft join (Select region_name,dim_region_key from cdp_dwh.dim_region_t) region\non branch_office.dim_region_key=region.dim_region_key\nleft join (select dim_broker_key,broker_rut_num,broker_name from cdp_dwh.dim_broker_t) broker\non f.dim_broker_key=broker.dim_broker_key\nand f.broker_rut_num=broker.broker_rut_num\nleft join (select substring(vltn_dtm,1,4) as year_number,substring(vltn_dtm,6,2) as month_number,curr_cd,uf_lcl_curr_clsng_val as conv\nfrom cdp_dwh.curr_conv_t\nwhere curr_conv_frequency_cd = 'Monthly' and src_sys_cd = 'axis') b\non f.month=b.month_number\nand f.year=b.year_number\nand f.curr_cd=b.curr_cd\nleft join (select dateadd(month,1,vltn_dtm) as vltn_dtm_1,substring(vltn_dtm_1,1,4) as year_number,substring(vltn_dtm_1,6,2) as month_number,curr_cd,uf_lcl_curr_clsng_val as prev_conv\nfrom cdp_dwh.curr_conv_t\nwhere curr_conv_frequency_cd = 'Monthly' and src_sys_cd = 'axis') c\non f.month=c.month_number\nand f.year=c.year_number\nand f.curr_cd=c.curr_cd\ngroup by\nf.src_sys_cd\n,\"year\"\n,\"month\"\n,f.dim_broker_key\n,f.broker_rut_num\n,broker.broker_name\n,f.agreement\n,f.dim_prd_pln_hrchy_key\n,f.prd_cd\n,f.prd_desc\n,f.dim_lob_key\n,f.lob_cd\n,f.lob_desc\n,f.dim_branch_office_key\n,f.branch_office_cd\n,f.branch_office_name\n,region.region_name\n,f.rlshp_key\n,f.executive_rut\n,f.executive_name\n,f.dim_policyholder_key\n,f.dim_insured_key\n,currency_cd ;"
    },
    {
        "type": "pre/post-sql",
        "path": "content.transformations[0].dataAdapter.oprRuntimeAttributes.attributes[9]",
        "name": "Pre-sql",
        "value": "delete from cdp_dwh.fact_margin_summary_t where src_sys_cd = 'axis';"
    },
    {
        "type": "pre/post-sql",
        "path": "content.transformations[0].dataAdapter.runtimeAttributes.attributes[9]",
        "name": "Pre-sql",
        "value": "delete from cdp_dwh.fact_margin_summary_t where src_sys_cd = 'axis';"
    }
]